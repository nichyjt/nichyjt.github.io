<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Nicholas Yek</title><link>https://nichyjt.github.io/tags/rust/</link><description>Recent content in Rust on Nicholas Yek</description><generator>Hugo -- gohugo.io</generator><language>en-sg</language><copyright>Nicholas Yek</copyright><lastBuildDate>Sat, 05 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://nichyjt.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple Rust puzzle about borrow checking</title><link>https://nichyjt.github.io/essays/2025/rs_puzzle/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2025/rs_puzzle/</guid><description>I am teaching a class on parallel and concurrent programming. We teach Rust as part of the curriculum because of async and more importantly, its memory safety model.
The memory safety model is essentially Rust&amp;rsquo;s borrowing and ownership rules. The rules are quite elegant, and are enforced at compile-time with the compiler&amp;rsquo;s borrow checker to ensure memory safety. I will summarise the rules here briefly:
Rule 1, Ownership:
One and only 1 owner can exist for any data that is allocated.</description></item></channel></rss>