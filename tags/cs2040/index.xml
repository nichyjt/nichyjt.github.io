<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS2040 on Nicholas Yek</title><link>https://nichyjt.github.io/tags/cs2040/</link><description>Recent content in CS2040 on Nicholas Yek</description><generator>Hugo -- gohugo.io</generator><language>en-sg</language><copyright>Nicholas Yek</copyright><lastBuildDate>Sun, 05 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nichyjt.github.io/tags/cs2040/index.xml" rel="self" type="application/rss+xml"/><item><title>Finding Big O from non-standard recurrence relations without master method</title><link>https://nichyjt.github.io/essays/2023/recurrence/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2023/recurrence/</guid><description>A friend taking their data structures and algorithms (DSA) class asked me a question about recurrence relations. Consider this:
$ \text{Find } O(T(n)), \text{where} ~ T(n) = 3T(\frac{2}{3}n) $
This was derived from pseudocode where 3 recursive calls are made per function call, each splitting the subproblem into (2/3) N.
Nevermind the practicality, its a DSA course after all.
It doesn&amp;rsquo;t fit any of the common recurrence relations. Tools like the master method are not taught at entry level DSA classes (or even bootcamps)!</description></item></channel></rss>