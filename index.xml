<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Index on Nicholas Yek</title><link>https://nichyjt.github.io/</link><description>Recent content in Index on Nicholas Yek</description><generator>Hugo -- gohugo.io</generator><language>en-sg</language><copyright>Nicholas Yek</copyright><lastBuildDate>Wed, 19 May 2021 09:49:37 +0800</lastBuildDate><atom:link href="https://nichyjt.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Lorem Ipsum :brain:</title><link>https://nichyjt.github.io/ipsum/</link><pubDate>Sun, 29 Dec 2024 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/ipsum/</guid><description>Lorem Ipsum If you found this on the live website, congratulations! You found an easter egg.
This page is a lorem ipsum-esque page to test the core functionality of the website and to do regression testing1&amp;hellip;
Math This is enabled with Katex scripts being imported.
$\sin(x) = \cos(x-\frac{\pi}{2})$
Shortcode Showcase Spoiler If we need to hide something, we have a spoiler feature !
If we have many things to hide,</description></item><item><title>MPMC Message Queue using only atomics</title><link>https://nichyjt.github.io/essays/2024/atomic-mq/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2024/atomic-mq/</guid><description>The Code In memory limited environments, using typical C++ synchronization primitives such as counting_semaphores may not be possible. Or perhaps you are using C. So, a pure atomic implementation may be needed.
This is my crack at making a buffered MPMC MQ.
Done in 1 night as a POC to a peer. So, this is likely problematic somewhere. But for the sake of documentation, here it is.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #include &amp;lt;stdatomic.</description></item><item><title>Caching makes things fast - an embedded example (CG2271)</title><link>https://nichyjt.github.io/essays/2024/caching/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2024/caching/</guid><description>Caching things smartly can make systems efficient.
Embedded systems have limited resources. We need to carefully manage how messages are being sent and how we handle state changes.
In this writeup (and personal reflection), I highlight a real exampleBut greatly simplified &amp;#8203; to show how caching state can lead to performance gains.
Sending signals For some context, this (toy) example was from a Real-time Operating System (CG2271) course where we had to build a race car and complete an obstacle course in the fastest time possible.</description></item><item><title>Hotswapping kernels like they're keyboard switches</title><link>https://nichyjt.github.io/essays/2024/kernel_duckery/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2024/kernel_duckery/</guid><description>New Kernels break things. Old Kernels break things. Sometimes in life you want to turn back time to simpler times.
I&amp;rsquo;m taking CS3211 and learning to use thread sanitizer (TSAN) to debug concurrent C++ programs.
Alas, FATAL: ThreadSanitizer: unexpected memory mapping 0x5fb3d2108000-0x5fb3d2129000
Even the simplest of &amp;ldquo;hello world&amp;rdquo; programs (with no concurrency) results in a crash. Pain.
After hours of google-fu, prowling old-school forums and asking around, it turns out to be a kernel issue.</description></item><item><title>Generalized CNF for "At Least k, given n variables"</title><link>https://nichyjt.github.io/essays/2023/atleastk/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2023/atleastk/</guid><description>I built this formula in preparation for CS3243 finals, but on hindsight it was overkill and the exam didn&amp;rsquo;t even need this&amp;hellip; 😢
But, in the spirit of sharing, here&amp;rsquo;s my questionable formula and the method I obtained this.
General CNF at least k, n variables For $n$ variables, $X = \set{x_1, x_2, &amp;hellip;, x_n}$. Arrange them into combinations of k variables.
Denote the set of k-variable combinations, $C = \set{c_1, c_2, &amp;hellip;}$, or more formally in the following footnote^1.</description></item><item><title>Testing &amp; Tuning with Data</title><link>https://nichyjt.github.io/teaching/cg1111a/testing/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/testing/</guid><description>This is generally what will happen when you test your sensors, especially for your IR and colour-detection sensors.
The number of iterations is positively correlated with you tilting Most of us will fail the &amp;ldquo;works on 2nd try step&amp;rdquo;. And many of you will get incredibly tilted when the number of times you re-collected your data approaches infinity.
Yes - this is the biggest headache in this course - tuning your code to fit the &amp;lsquo;experimental&amp;rsquo; data you get from the sensors.</description></item><item><title>mBot Bootstrap</title><link>https://nichyjt.github.io/teaching/cg1111a/mbot_bootstrap/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/mbot_bootstrap/</guid><description>Usage Guidelines MakeBlock&amp;rsquo;s C API documentation is virtually non-existent. I tried already&amp;hellip;
You will need to read through the source code to see what libraries have certain functions.
Minimally, you must import these 2 libraries:
0 1 #include &amp;lt;MemCore.h&amp;gt; #include &amp;lt;MePort.h&amp;gt; To make it easier to navigate through the documentation, I provide references to the APIs you will likely be using.
This is non-exhaustive, and you will need to read the docs to find out how to properly use the API.</description></item><item><title>Hardware Debugging Tips</title><link>https://nichyjt.github.io/teaching/cg1111a/hardware_debugging/</link><pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/hardware_debugging/</guid><description>By now you would have experienced the joys of debugging hardware.
You probably have some ideas on how to make debugging less painful, but have not been formally &amp;lsquo;taught&amp;rsquo; this yet.
As requested by some of you and in view of your upcoming project, I will share some pointers for building your hardware and making the debugging experience more pleasant. You are welcome to share these tips with your peers! #opensource</description></item><item><title>Embedded Programming Tips</title><link>https://nichyjt.github.io/teaching/cg1111a/coding_tips/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/coding_tips/</guid><description>Overall Guidelines The overall guideline is very similar to your lab report. Prioritize being explicit and clear. As you do more team coding projects like Orbital or CS2113, you will experience firsthand why this matters.
Apart from the specific tips I will showcase later, your standard good coding practices apply.
Make sure your code is well-factored and commented so that your peers (and yourself) don&amp;rsquo;t forget what your code is supposed to do.</description></item><item><title>Debugging hacks with your Multimeter</title><link>https://nichyjt.github.io/teaching/cg1111a/multimeter_debug/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/multimeter_debug/</guid><description>You&amp;rsquo;ve been issued a multimeter for this course.
It can do so much more than just measuring V, I, R.
I will share with you two additional things you can do with your multimeter that will be useful for this course, as well as for EG1311 and the other modules you take that require a multimeter.
Continuity Testing Your multimeter has a function that can test if a circuit is open or closed.</description></item><item><title>Complex Number Primer</title><link>https://nichyjt.github.io/teaching/cg1111a/complex_numbers/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/complex_numbers/</guid><description>Complex numbers in the context of CG1111A is not too challenging.
With enough practice, it is easy to solve complex number questions in CG1111A.
src: xkcd 2028 Useful Formulae Consider an arbitrary complex number $x(t)$:
$ \text{1. Cartesian form: } x(t) = a(t) + jb(t) \\ ~ \\ \text{2. Polar form: } x(t) = r(t)e^{j \theta(t)} \begin{cases} r(t) = \sqrt{a^2 + b^2} \\ \theta(t) = \angle{x} = tan^{-1}(\frac{b}{a}) \end{cases} $</description></item><item><title>Lab reports - Optimizing for readability</title><link>https://nichyjt.github.io/teaching/cg1111a/lab_reports/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/lab_reports/</guid><description>Lab Reports and University The purposeIn my opinion&amp;hellip; &amp;#8203; of the Lab report is not only for the teaching team to check your understanding of the material but also for you to consolidate your learning and also practice organizing your thoughts on paper (or digital paper&amp;hellip;) in a structured way.
You need to get used to writing. Lab reports, and by extension, academic writing, are the bread and butter of the academic world, even for an undergraduate.</description></item><item><title>Welcome to Computer Engineering</title><link>https://nichyjt.github.io/teaching/cg1111a/welcome/</link><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/cg1111a/welcome/</guid><description>Welcome! Hello and welcome to CG1111A! 🙌
Congratulations on getting into Computer Engineering! 🎉
It was NOT easy getting here. Our IGP is pretty darn high.
Your academic career will see you touch MANY aspects of the computing world. You will explore a fair bit of the Computing world, from the lower levelse.g. Logic gates, transistors&amp;hellip; &amp;#8203; of abstraction to the higher levelse.g. Algorithms, machine learning &amp;#8203;.</description></item><item><title>Finding Big O from non-standard recurrence relations without master method</title><link>https://nichyjt.github.io/essays/2023/recurrence/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2023/recurrence/</guid><description>A friend taking their data structures and algorithms (DSA) class asked me a question about recurrence relations. Consider this:
$ \text{Find } O(T(n)), \text{where} ~ T(n) = 3T(\frac{2}{3}n) $
This was derived from pseudocode where 3 recursive calls are made per function call, each splitting the subproblem into (2/3) N.
Nevermind the practicality, its a DSA course after all.
It doesn&amp;rsquo;t fit any of the common recurrence relations. Tools like the master method are not taught at entry level DSA classes (or even bootcamps)!</description></item><item><title>Recovering Linux from initramfs</title><link>https://nichyjt.github.io/essays/2022/initramfs/</link><pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2022/initramfs/</guid><description>You turned on your Linux machine and are greeted by a very scary looking terminal. You&amp;rsquo;ve booted into busybox and are in initramfs. How do I fix this?
initramfs, Image src: askubuntu question Very rarely, memory can get corrupted on your Linux machine. When that happens, you boot into the terminal above. The fix is a simple 1 line command using the fsck built-in tool.
Before using fsck, you need to identify which hard disk stores your working data.</description></item><item><title>How to choose which OS to boot into with systemd-boot</title><link>https://nichyjt.github.io/essays/2022/popos_choose_os/</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2022/popos_choose_os/</guid><description>You are a POP!_OS user or use systemd-boot, and want this screen to pop up when you boot.
systemd-boot menu, Image src: freedesktop.org This guide is for you.
POP_OS was not configured to have the boot menu come up so there is a bit of settings config required.
Option 1: Hold spacebar When you boot, hold spacebar and the menu should show up. Arrow keys to select your boot entry to and press enter to boot into it.</description></item><item><title>FindNUS :telescope:</title><link>https://nichyjt.github.io/projects/findnus/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/projects/findnus/</guid><description>What is FindNUS? FindNUS is a lost and found web application that my pal Jin Xuan and I built over summer 2022.
FindNUS was awarded the highest level of achivement, given to only the top 7% of teams (top 29 of 414 teams) for NUS School of Computing&amp;rsquo;s 2022 iteration of Orbital, an independent software development module.
We built FindNUS because we felt that the current lost and found website in NUS sucks and we could do better.</description></item><item><title>CG2111A - Mod Review</title><link>https://nichyjt.github.io/essays/2022/cg2111a/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2022/cg2111a/</guid><description>Engineering Principles and Practice 2 (EPP2) CG2111A, aka EPP2 is the highlight module for Computer Engineering freshies.
Personally, it&amp;rsquo;s one of my favourite modules of the semester despite the difficulty. You can expect to build interesting things and learn a whole range of computing topics.
I will be sharing my experience based on the AY 21/22 Semester 2 iteration.
Mapping the maze using Alex&amp;#39;s LiDAR ^ To reiterate, you&amp;rsquo;ll be building cool stuff :)</description></item><item><title>CG1111A - Mod Review</title><link>https://nichyjt.github.io/essays/2022/cg1111a/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2022/cg1111a/</guid><description>Engineering Principles and Practice 1 (EPP1) CG1111A, aka EPP1 is the very first CEG module NUS Computer Engineering students will be taking.
This is the highlight module for the semester (apart from CS1010), so look forward to it!
I will be sharing my experience based on the AY 21/22 Semester 1 iteration.
CG1111A is conducted in a flipped classroom format where content learning is done asynchronusly and the hands-on learning done via labs and tutorials.</description></item><item><title>SnipNScan :camera:</title><link>https://nichyjt.github.io/projects/snipnscan/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/projects/snipnscan/</guid><description>Image Hell A picture is worth a thousand words - A common adage
Images are a rich source of information. But what worth is that thousand words if I can&amp;rsquo;t extract the actual text inside the images? Let me explain my frustration about images.
Webinar Link Hell Imagine yourself in some online conference. Stare in wonder as the presenter asks you to access some (long-ass) link on their screen share.</description></item><item><title>Cnake :snake:</title><link>https://nichyjt.github.io/projects/cnake/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/projects/cnake/</guid><description>I thought it would be fun to make a one-shot snake game project to familiarise myself with the ncurses library and play around with some data structures, which led to this ripoff snake game you can find on my GitHub.
If you&amp;rsquo;re interested, you can take a look and perhaps give it a go!
The following sections of this post are just some code discussions for the nerds.
Building Cnake I won&amp;rsquo;t talk too much about the ncurses library and will be writing more about the things I found interesting while building this project, mainly, these questions I had to answer while making the game.</description></item><item><title>Making Linux Home</title><link>https://nichyjt.github.io/essays/2021/linux/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/essays/2021/linux/</guid><description>Linux 🐧 - A Tasty Introduction Are you tired of having useless, suspicious 👀 bloatware being installed on your computer?
Are you looking for a more secure and stable machine out-of-the-box?
Are you a developer that wants to be in better control of your machine?
Perhaps Linux is for you.
What&amp;rsquo;s Linux? Linux refers to the family of Operating Systems (OS) that use the open-source Linux kernel. It may seem like a niche OS, but Linux plays a much larger role in your daily life than you might expect.</description></item><item><title>Sudoku.py</title><link>https://nichyjt.github.io/projects/sudoku/</link><pubDate>Sun, 30 May 2021 21:08:04 +0800</pubDate><guid>https://nichyjt.github.io/projects/sudoku/</guid><description>Sudoku Squares are elegant, and frankly, magical.1 With pockets of time being freed up with work from home orders during the COVID-19 pandemic, I picked up Sudoku to fill in the gaps. And man, it&amp;rsquo;s fun solving them - it&amp;rsquo;s cathartic seeing the numbers fall nicely into place.
It&amp;rsquo;s one thing to solve Sudokus, but another to create one.
Out of curiosity, I decided to try and make a fully filled Sudoku Grid by hand.</description></item><item><title>Hey There! :wave:</title><link>https://nichyjt.github.io/homepage/intro/</link><pubDate>Wed, 19 May 2021 09:49:37 +0800</pubDate><guid>https://nichyjt.github.io/homepage/intro/</guid><description>I&amp;rsquo;m your host, Nicholas.
Welcome to my little corner of the internet. 🏕️
I waffle on about code &amp;amp; technology.
It ain&amp;rsquo;t much, but it&amp;rsquo;s honest work. 😄
Grab a coffee ☕, relax ⛱️ and enjoy your stay!</description></item><item><title>B.Eng, Computer Engineering</title><link>https://nichyjt.github.io/about/experience/nus_ceng/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/nus_ceng/</guid><description>Awards &amp;amp; Honours First Class Honours Deans List (AY23/24 S2) CAPT Honour Roll (AY22/23) Top Students, Software Engineering &amp;amp; Object-Oriented Programming (CS2113) Top Students, Engineering Principles and Practice 1 (CG1111A) Coursework Apart from the core syllabus, I&amp;rsquo;ve focused on computing systems (parallel, large-scale) and networks. Notable electives:
&amp;gt; Parallel &amp;amp; Concurrent Programming (CS3211)
&amp;gt; Parallel Computing (CS3210)
&amp;gt; Network Applications &amp;amp; Protocols (EE4210)
&amp;gt; Computer Networks Practice (CS3103)</description></item><item><title>End to End IoT System Development Intern</title><link>https://nichyjt.github.io/about/experience/iot_espressif/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/iot_espressif/</guid><description>Espressif Systems develops wireless communication SoCs and cloud solutions to power IoT applications.
Developed an AI-powered “power benchmarker” microsite to benchmark chip power usage from oscilloscope data Trained CNN models with up to 95% accuracy to classify BLE events from oscilloscope data using Keras Streamlined collection of live, event driven data from ESP32 chips using concurrent programming Automated region-of-interest feature extraction from time-series oscilloscope data using sklearn Created an interactive microsite to visualise typical BLE power consumption characteristics on ESP32 chips</description></item><item><title>FindNUS :telescope:</title><link>https://nichyjt.github.io/about/projects/findnus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/projects/findnus/</guid><description>Executive Summary:
Awarded the highest level of achivement, given to the top 7% of teams (top 29 of 414 teams) for NUS School of Computing&amp;rsquo;s 2022 iteration of Orbital.
FindNUS is a lost and found web app built during Summer 2022 Orbital. As the backend developer, I built a RESTful API backend using a microservices architecture. Apart from regular CRUD, we also used some NLP and fuzzy searching to help lost people find their lost stuff.</description></item><item><title>New here? README</title><link>https://nichyjt.github.io/teaching/etc/cg1111a_readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/etc/cg1111a_readme/</guid><description>This microsite contains COMPLETELY OPTIONAL supplementary material, tips and explainers for CG1111A coursework for the Academic Year 23/24.
The amount of content I post here will be based on student feedback and academic needs. This page will be (a)periodically updated as the semester progresses!
Note: The contents of this site are NOT officially sanctioned by the ECE department. This is an initiative (and a little project) by me to provide a richer and more targetted learning experience for CG1111A.</description></item><item><title>README</title><link>https://nichyjt.github.io/teaching/etc/cs3211_readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/teaching/etc/cs3211_readme/</guid><description/></item><item><title>SnipNScan :camera:</title><link>https://nichyjt.github.io/about/projects/snipnscan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/projects/snipnscan/</guid><description>Executive Summary:
Using OpenCV and Tesseract, I built a QR code and text scanner because too much text in this world is embedded in images and are un-copypasteable. Think of images of code.
🔸 Project Blogpost
🔸 Project Link</description></item><item><title>Software Developer Intern</title><link>https://nichyjt.github.io/about/experience/swe_hackertrail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/swe_hackertrail/</guid><description>HackerTrail uses data-driven technology to evaluate and connect software professionals to employers.
Developed new features and extensive UI changes with React, driving a successful revamp on the &amp;ldquo;Assessment Platform&amp;rdquo; product Analysed market competitors and collated user feedback to identify high business value features missing on the assessment platform Built an exploratory backend API using FastAPI to automate messaging pipelines Rapid frontend prototyping to affirm SEO effectiveness for the company’s landing page Recommendation by my team lead on my SWE skills.</description></item><item><title>Software Developer Intern</title><link>https://nichyjt.github.io/about/experience/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/template/</guid><description/></item><item><title>Software Engineer Intern</title><link>https://nichyjt.github.io/about/experience/swe_ncs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/swe_ncs/</guid><description>The Things of AI (ToAI) team builds E2E IoT device management solutions for enterprise &amp;amp; government IoT needs.
Built customizable data visualisation capabilities by integrating external APIs into the platform with Angular Generated time-series data visualisation reports for over 32,000 IoT devices using PostgreSQL and PowerBI Authored an Agile-based project implementation schedule to support a Tender bid submission Testimonial &amp;amp; Award Nomination by my supervisor, Hsu Yee.</description></item><item><title>Software Engineer Intern</title><link>https://nichyjt.github.io/about/experience/swe_toffs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nichyjt.github.io/about/experience/swe_toffs/</guid><description>TOFFS provides Multi-CDN and cybersecurity solutions for Enterprise networking.
Integrated an Anti-DDoS machine learning model into network infrastructure, enabling smart IP blacklisting Automated daily processing of up to 2.5 TB of data efficiently with concurrent programming to prep model training Optimised ML training with code refactoring and hardware acceleration, achieving 50% reduction in training time Testimonial on my work by Co-Founder Jason Kong.</description></item></channel></rss>